README.proj1
Pranav Maniktala

The project was implemented with my own structs that I had made (list.h was way to confusing) I implemented the skiplist using a skip_list struct which held skip_list_nodes. The skiplist was comprised of the size of the skiplist, the number of levels, the head of the list, and the probability. That skiplist is comprised of nodes each holding a char array for the number of levels and a pointer to the next skiplist node and a key for the unique node. At the bottom of each skiplist node (level 1). I implememented the mailbox queue which I named mailbox, each mailbox had a node called mailbox_node which held the data (message)and a pointer to the next mailbox_node. The mailbox itself kept track of the head and tail and size of the queue. when the corresponding key/id is called then I pop of the first message or the top mailbox_node at the top of mailbox. a lot of the infleunce for the structure of my skiplist was from the link professor Sebbald gave us ftp://ftp.cs.umd.edu/pub/skipLists/skiplists.pdf . The skiplist works to find a message by starting at the highest head of the list and looks ahead if the next key ahead is less than the id handed. Until then it keeps moving to the right and if the next value is too large, it drops down a level and continues the process until it reaches the key then drops down into the mailbox queue level.

I tested the logic of my skiplist and mailbox queues with print_skiplist(skip_list *sl) and void print_mailbox(mailbox *mailbox) in user space which are commented out due to the printf command not working in kernel space. However I did verify that there were no memory leaks and have commented a main.c if you were interesting in recieving a visual look of my skiplist implementation.

As for the System Call layer which I had the hardest implementing I made multiple if statements that would check for specifications such as if the user was root or if a user had access to mailbox if not I returned -EPERM,if the skiplist initialized and I attempted to run another function I returned -ENODEV, if I searched for a node that wasnt there then I returned -ENOENT, etc. and then used a mutex lock and unlock to call the skiplist function that I wanted. I made sure to wrap the mutex locks at the beginning and end of the funtions in order to prevent concurrent processes attempting to make  system calls and recieving wrong info. For example attempting to read a skiplist if it is being deleted at the "same" time. I tested a majority of these system calls to the best of my ability The only ones that do not work are the acl list add and remove however my code has been written in and commented in the the corresponding system calls where they should be. The acl list which is added to each node is successfully initialized and cleaned however in the corresponding system calls and functions. its somthing wrong with my initial permission checks however the funtionality of my add_acl_pid() function should work, I have refraimed from calling this in my test1 but wrote and commented out since if I call that system call my lock will never release causing an error. I have added the code to find the acl based on and check if the user has permision to run the function however I have commented it out since I cannot add any users to the list. The edge cases that arent caught correctly are the ones regarding when you try to create 2 nodes with the same id

as far as my tests go my first test is just a simple test in order for you to see that my skiplist does indeed function correctly, my second test tries to call the the functions without initializing a list and returns the corresponding errors. My third function calls the functions in a random order so it is clear to see that the correct edge cases are being called. I have labeled the following "test1","test2", and "test3" respectively. the last file "shutdown" is a shutdown system call just in case my project breaks and you need to free the skiplist. all tests must be run with sudo, im sure you know that though. Did not sleep much sorry if im ranting on I just want you to know that I understand the concept of this project just running of 4 hours of sleep the past week.